/[\r\n]/gconsole.log("hello")const { error } = require('console')/** * TODO: fs模块的相关内容测试 *  * 1、 fs.writeFile('文件路径', '写入内容', err =>{}) * 2、 fs.readFile('文件路径', (error, data)=>{}) *  */const fs = require('fs')const path = require('path')//1、 写入文件 fs.writeFile('文件路径', '写入内容', err =>{})fs.writeFile('./test.txt', 'hello.nodejs', err =>{  //写入后的回调函数  if(err) {    console.log(err)  }else{    console.log("写入成功")  }})//2、 读取文件fs.readFile(path.join(__dirname,'./test.txt'), (error, data)=>{   //如果没有异常， error就是null   console.log("读取文件的内容: "+ data.toString())})/** * TODO: 压缩前端的hmtl页面代码 * 1. 先读取源代码 * 2. 去除回车 空格 等 * 3. 正则替换字符串 * 4. 写入新的html页面 *///2、 读取文件fs.readFile(path.join(__dirname,'./nodeTest.js'), (error, data)=>{  //如果没有异常， error就是null  console.log("读取文件的内容: "+ data.toString())  const htmlStr = data.toString()  // 1.2 使用正则替换内容字符串里的，回车符\r 换行符\n  const resultStr = htmlStr.replace(/[\r\n]/g, '')  // 确认后，写入到 dist/index.html 内  fs.writeFile(path.join(__dirname,'./nodeTest.js'), resultStr, err => {    if (err) console.log(err)  })})